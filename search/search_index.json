{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":""},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml          # Arquivo de configura\u00e7\u00e3o\ndocs/\n    index.md        # A documenta\u00e7\u00e3o do projeto\n    arquiteturas.md # Arquiteturas em mermaid do projeto\n</code></pre>"},{"location":"arquiteturas/","title":"Arquiteturas","text":""},{"location":"arquiteturas/#fluxo-da-etl","title":"Fluxo da ETL","text":"<p>Fluxo de sequencia de diagrama simplificado</p> <pre><code>sequenceDiagram\n    participant Fonte Externa\n    participant Scrapy\n    participant Pandas\n    participant Postgres\n    participant Streamlit\n    participant Insights\n\n    Fonte Externa-&gt;&gt;Scrapy: Dados Brutos\n    Scrapy-&gt;&gt;Pandas: Dados Extra\u00eddos\n    Pandas-&gt;&gt;Postgres: Dados Transformados e Carregados\n    Postgres-&gt;&gt;Streamlit: Dados Estruturados\n    Streamlit-&gt;&gt;Insights: Gera\u00e7\u00e3o de Insights\n</code></pre>"},{"location":"dashboard/","title":"Documenta\u00e7\u00e3o do Dashboard","text":""},{"location":"dashboard/#pesquisa-de-mercado-tenis-esportivos-no-mercado-livre","title":"Pesquisa de Mercado - T\u00eanis Esportivos no Mercado Livre","text":"<p>Este projeto utiliza o Streamlit para criar uma aplica\u00e7\u00e3o interativa que analisa dados de t\u00eanis esportivos do Mercado Livre. A seguir, s\u00e3o descritos os m\u00f3dulos e funcionalidades utilizados.</p>"},{"location":"dashboard/#modulos-utilizados","title":"M\u00f3dulos Utilizados","text":""},{"location":"dashboard/#streamlit","title":"<code>streamlit</code>","text":"<p>Streamlit \u00e9 um framework de c\u00f3digo aberto que permite criar aplica\u00e7\u00f5es web interativas em Python de forma r\u00e1pida e f\u00e1cil. Abaixo est\u00e3o os principais componentes do Streamlit usados no projeto:</p> <ul> <li><code>st.title</code>: Define o t\u00edtulo da aplica\u00e7\u00e3o.</li> <li><code>st.subheader</code>: Define um subt\u00edtulo para as se\u00e7\u00f5es da aplica\u00e7\u00e3o.</li> <li><code>st.columns</code>: Cria uma disposi\u00e7\u00e3o em colunas, permitindo organizar os elementos da aplica\u00e7\u00e3o lado a lado.</li> <li><code>st.metric</code>: Exibe KPIs (Key Performance Indicators) de forma visualmente atraente.</li> <li><code>st.bar_chart</code>: Cria gr\u00e1ficos de barras para visualiza\u00e7\u00e3o de dados.</li> <li><code>st.write</code>: Exibe tabelas e outros tipos de dados.</li> </ul>"},{"location":"dashboard/#pandas","title":"<code>pandas</code>","text":"<p>Pandas \u00e9 uma biblioteca essencial para manipula\u00e7\u00e3o e an\u00e1lise de dados em Python. No projeto, \u00e9 usada para carregar, processar e analisar os dados dos t\u00eanis esportivos.</p> <ul> <li><code>pd.read_sql_query</code>: L\u00ea os dados de uma tabela SQL e retorna um DataFrame.</li> <li><code>df.shape</code>: Retorna o n\u00famero de linhas e colunas do DataFrame.</li> <li><code>df['column_name'].nunique</code>: Conta o n\u00famero de valores \u00fanicos em uma coluna.</li> <li><code>df['column_name'].mean</code>: Calcula a m\u00e9dia dos valores em uma coluna.</li> <li><code>df['column_name'].value_counts</code>: Conta a frequ\u00eancia dos valores \u00fanicos em uma coluna.</li> <li><code>df.groupby('column_name').mean</code>: Agrupa os dados por uma coluna e calcula a m\u00e9dia de cada grupo.</li> <li><code>df.sort_values</code>: Ordena os valores de um DataFrame.</li> </ul>"},{"location":"dashboard/#sqlite3","title":"<code>sqlite3</code>","text":"<p>SQLite3 \u00e9 um banco de dados SQL leve e aut\u00f4nomo. \u00c9 usado no projeto para armazenar os dados dos t\u00eanis esportivos.</p> <ul> <li><code>sqlite3.connect</code>: Conecta ao banco de dados SQLite.</li> <li><code>pd.read_sql_query</code>: Executa uma consulta SQL e retorna os resultados como um DataFrame.</li> </ul>"},{"location":"dashboard/#estrutura-do-codigo","title":"Estrutura do C\u00f3digo","text":"<p>O c\u00f3digo do projeto est\u00e1 estruturado da seguinte forma:</p> <ol> <li> <p>Conectar ao Banco de Dados <pre><code>conn = sqlite3.connect('../data/quotes.db')\ndf = pd.read_sql_query(\"SELECT * FROM mercadolivre_items\", conn)\nconn.close()\n</code></pre></p> </li> <li> <p>T\u00edtulo da Aplica\u00e7\u00e3o <pre><code>st.title('Pesquisa de Mercado - T\u00eanis Esportivos no Mercado Livre')\n</code></pre></p> </li> <li> <p>KPIs Principais <pre><code>st.subheader(\"KPIs Principais\")\ncol1, col2, col3 = st.columns(3)\n\ntotal_items = df.shape[0]\ncol1.metric(label=\"N\u00famero Total de Itens\", value=total_items)\n\nunique_brands = df['brand'].nunique()\ncol2.metric(label=\"N\u00famero de Marcas \u00danicas\", value=unique_brands)\n\naverage_new_price = df['new_price'].mean()\ncol3.metric(label=\"Pre\u00e7o M\u00e9dio Novo (R$)\", value=f\"{average_new_price:.2f}\")\n</code></pre></p> </li> <li> <p>An\u00e1lises Espec\u00edficas</p> <ul> <li> <p>Marcas mais encontradas at\u00e9 a 10\u00aa p\u00e1gina <pre><code>st.subheader('Marcas mais encontradas at\u00e9 a 10\u00aa p\u00e1gina')\ncol1, col2 = st.columns([4, 2])\ntop_10_pages_brands = df.head(500)['brand'].value_counts().sort_values(ascending=False)\ncol1.bar_chart(top_10_pages_brands)\ncol2.write(top_10_pages_brands)\n</code></pre></p> </li> <li> <p>Pre\u00e7o m\u00e9dio por marca <pre><code>st.subheader('Pre\u00e7o m\u00e9dio por marca')\ncol1, col2 = st.columns([4, 2])\naverage_price_by_brand = df.groupby('brand')['new_price'].mean().sort_values(ascending=False)\ncol1.bar_chart(average_price_by_brand)\ncol2.write(average_price_by_brand)\n</code></pre></p> </li> <li> <p>Satisfa\u00e7\u00e3o por marca <pre><code>st.subheader('Satisfa\u00e7\u00e3o por marca')\ncol1, col2 = st.columns([4, 2])\ndf_non_zero_reviews = df[df['reviews_rating_number'] &gt; 0]\nsatisfaction_by_brand = df_non_zero_reviews.groupby('brand')['reviews_rating_number'].mean().sort_values(ascending=False)\ncol1.bar_chart(satisfaction_by_brand)\ncol2.write(satisfaction_by_brand)\n</code></pre></p> </li> </ul> </li> </ol>"},{"location":"dashboard/#como-executar-o-projeto","title":"Como Executar o Projeto","text":"<ol> <li> <p>Instale as depend\u00eancias necess\u00e1rias: <pre><code>pip install streamlit pandas sqlite3\n</code></pre></p> </li> <li> <p>Navegue at\u00e9 o diret\u00f3rio do projeto: <pre><code>cd src/dashboard\n</code></pre></p> </li> <li> <p>Execute o aplicativo Streamlit: <pre><code>streamlit run app.py\n</code></pre></p> </li> <li> <p>Acesse o aplicativo no navegador:     Abra <code>http://localhost:8501</code> no seu navegador para visualizar o aplicativo Streamlit.</p> </li> </ol>"},{"location":"piloto/","title":"Projeto Piloto","text":""},{"location":"piloto/#extracao","title":"Extra\u00e7\u00e3o","text":"<pre><code>import scrapy\n\nclass QuotesSpider(scrapy.Spider):\n    name = \"quotes\"\n    start_urls = [\n        \"https://quotes.toscrape.com/tag/humor/\",\n    ]\n\n    def parse(self, response):\n        for quote in response.css(\"div.quote\"):\n            yield {\n                \"author\": quote.xpath(\"span/small/text()\").get(),\n                \"text\": quote.css(\"span.text::text\").get(),\n            }\n\n        next_page = response.css('li.next a::attr(\"href\")').get()\n        if next_page is not None:\n            yield response.follow(next_page, self.parse)\n</code></pre> <pre><code>scrapy runspider quotes_spider.py -o quotes.csv\n</code></pre>"},{"location":"piloto/#tranformacao-e-load","title":"Tranforma\u00e7\u00e3o e Load","text":"<pre><code>import pandas as pd\nimport sqlite3\nfrom datetime import datetime\n\n# Defina a vari\u00e1vel origem\norigem = \"quotes_scrapy\"\n\n# Carregar o CSV em um DataFrame pandas\ndf = pd.read_csv('quotes.csv')\n\n# Adicionar a coluna _origem\ndf['_origem'] = origem\n\n# Adicionar a coluna _data_coleta com a data e hora atuais\ndf['_data_coleta'] = datetime.now()\n\n# Conectar ao banco de dados SQLite (ou criar um novo)\nconn = sqlite3.connect('quotes.db')\n\n# Salvar o DataFrame no banco de dados SQLite\ndf.to_sql('quotes', conn, if_exists='replace', index=False)\n\n# Fechar a conex\u00e3o com o banco de dados\nconn.close()\n</code></pre> <pre><code>python transform.py\n</code></pre>"},{"location":"piloto/#dashboard","title":"Dashboard","text":"<pre><code>import streamlit as st\nimport pandas as pd\nimport sqlite3\n\n# Conectar ao banco de dados SQLite\nconn = sqlite3.connect('quotes.db')\n\n# Carregar os dados da tabela 'quotes' em um DataFrame pandas\ndf = pd.read_sql_query(\"SELECT * FROM quotes\", conn)\n\n# Fechar a conex\u00e3o com o banco de dados\nconn.close()\n\n# T\u00edtulo da aplica\u00e7\u00e3o\nst.title('Quotes Dashboard')\n\n# Mostrar o DataFrame\nst.subheader('DataFrame')\nst.write(df)\n\n# KPI 1: N\u00famero total de cita\u00e7\u00f5es\ntotal_quotes = df.shape[0]\nst.metric(label=\"N\u00famero Total de Cita\u00e7\u00f5es\", value=total_quotes)\n\n# KPI 2: N\u00famero de autores \u00fanicos\nunique_authors = df['author'].nunique()\nst.metric(label=\"N\u00famero de Autores \u00danicos\", value=unique_authors)\n\n# KPI 3: Cita\u00e7\u00f5es mais recentes coletadas\nmost_recent_collection = df['_data_coleta'].max()\nst.metric(label=\"Data da Coleta Mais Recente\", value=most_recent_collection)\n\n# Mostrar cita\u00e7\u00f5es por autor\nst.subheader('Cita\u00e7\u00f5es por Autor')\nquotes_by_author = df['author'].value_counts()\nst.bar_chart(quotes_by_author)\n\n# Mostrar algumas cita\u00e7\u00f5es\nst.subheader('Algumas Cita\u00e7\u00f5es')\nfor index, row in df.iterrows():\n    st.write(f\"**{row['author']}**: {row['text']}\")\n</code></pre> <pre><code>streamlit run app.py\n</code></pre>"},{"location":"scrapy/","title":"Scrapy","text":""},{"location":"scrapy/#criando-um-projet","title":"Criando um projet","text":"<p>Precisamos criar um o nosso projeto</p> <p>Vamos usar o scrapy e ele j\u00e1 criar uma estrutura de projeto, assim conseguimos parametrizar algumas classes para acelerar o desenvolvimento utilizando o framework  do que queremos coletar</p> <pre><code>scrapy startproject coleta\n</code></pre> <p>Vamos fazer uma leve an\u00e1lise</p> <pre><code>scrapy shell\n</code></pre> <p>Precisamos criar nossa spider</p> <pre><code>scrapy genspider mercadolivre mercadolivre.com.br\n</code></pre> <pre><code>scrapy shell\n</code></pre> <pre><code>&gt;&gt;&gt; fetch('https://lista.mercadolivre.com.br/tenis-corrida-masculino')\n</code></pre> <pre><code>&gt;&gt;&gt; response\n</code></pre> <p><pre><code>&gt;&gt;&gt; response.text\n</code></pre> response.css('div.ui-search-result__content').get()</p> <p>products = response.css('div.ui-search-result__content')</p> <p>len(products)</p>"},{"location":"scrapy/#brand","title":"Brand","text":"<p>products.xpath('//*[@id=\":Ral5e6:\"]/div[2]/div/div[2]/span/text()').get() products.css('span.ui-search-item__brand-discoverability.ui-search-item__group__element::text').get()</p>"},{"location":"scrapy/#nome","title":"Nome","text":"<p>products.css('h2.ui-search-item__title::text').get() products.xpath('//*[@id=\":Ral5e6:\"]/div[2]/div/div[2]/a/h2/text()').get()</p>"},{"location":"scrapy/#old-price-real","title":"Old price real","text":"<p>products.css('span.andes-money-amount__fraction::text').get()</p>"},{"location":"scrapy/#old-price-centavos","title":"Old price centavos","text":"<p>andes-money-amount__cents.andes-money-amount__cents--superscript-16</p> <p>products.css('span.andes-money-amount__cents.andes-money-amount__cents--superscript-16::text').get()</p>"},{"location":"scrapy/#new-price-reais","title":"New price reais","text":"<p>products.css('span.andes-money-amount__fraction::text').get()</p> <p>products[0].css('span.andes-money-amount__fraction::text').getall()</p>"},{"location":"scrapy/#review","title":"Review","text":"<p>ui-search-reviews__rating-number</p>"},{"location":"scrapy/#new-price-centavos","title":"New price centavos","text":"<p>products.xpath('//*[@id=\":Ral5e6:\"]/div[2]/div/div[3]/div[1]/div/div/span[1]/span[4]/text()').get()</p> <p>CSS Selectors e XPath s\u00e3o duas linguagens de consulta diferentes usadas para selecionar elementos em documentos HTML e XML. Ambos s\u00e3o amplamente usados em web scraping, testes automatizados, e manipula\u00e7\u00e3o de documentos. Aqui est\u00e1 uma compara\u00e7\u00e3o detalhada entre os dois:</p>"},{"location":"scrapy/#proxima-pagina","title":"Proxima pagina","text":"<p>next_page = response.css('li.andes-pagination__button.andes-pagination__button--next a::attr(href)').get()</p>"},{"location":"scrapy/#css-selectors","title":"CSS Selectors","text":""},{"location":"scrapy/#vantagens","title":"Vantagens","text":"<ol> <li>Sintaxe Simples: CSS Selectors t\u00eam uma sintaxe mais simples e leg\u00edvel, especialmente para sele\u00e7\u00f5es b\u00e1sicas.</li> <li>Desempenho: Em muitos casos, CSS Selectors podem ser mais r\u00e1pidos, j\u00e1 que muitos motores de renderiza\u00e7\u00e3o da web s\u00e3o otimizados para CSS.</li> <li>Popularidade: S\u00e3o amplamente utilizados em desenvolvimento web para estilizar p\u00e1ginas, tornando-os familiares para muitos desenvolvedores.</li> <li>Suporte Padr\u00e3o: Suportado nativamente em muitas bibliotecas de scraping (como BeautifulSoup e Scrapy).</li> </ol>"},{"location":"scrapy/#desvantagens","title":"Desvantagens","text":"<ol> <li>Limita\u00e7\u00f5es de Consulta: CSS Selectors n\u00e3o t\u00eam a mesma flexibilidade e poder de express\u00e3o que XPath para consultas complexas.</li> <li>Suporte Limitado para XML: Embora possam ser usados para XML, CSS Selectors s\u00e3o menos comuns e menos poderosos nesse contexto comparado ao XPath.</li> </ol>"},{"location":"scrapy/#exemplos","title":"Exemplos","text":"<ul> <li>Selecionar um elemento <code>div</code> com uma classe espec\u00edfica:   <pre><code>div.example\n</code></pre></li> <li>Selecionar todos os elementos <code>a</code> dentro de um <code>div</code> com ID <code>container</code>:   <pre><code>#container a\n</code></pre></li> <li>Selecionar o primeiro elemento <code>p</code> dentro de um <code>div</code>:   <pre><code>div &gt; p:first-child\n</code></pre></li> </ul>"},{"location":"scrapy/#xpath","title":"XPath","text":""},{"location":"scrapy/#vantagens_1","title":"Vantagens","text":"<ol> <li>Flexibilidade e Poder: XPath \u00e9 extremamente poderoso e flex\u00edvel, permitindo consultas muito complexas.</li> <li>Suporte Completo para XML: XPath foi projetado para trabalhar com XML, tornando-o ideal para manipula\u00e7\u00e3o de documentos XML.</li> <li>Sele\u00e7\u00e3o Relativa: Permite navegar no documento relativo a um n\u00f3, usando eixos como <code>parent</code>, <code>ancestor</code>, <code>sibling</code>, etc.</li> <li>Filtragem Avan\u00e7ada: Suporta filtros avan\u00e7ados e fun\u00e7\u00f5es para manipula\u00e7\u00e3o de strings, n\u00fameros, e booleanos.</li> </ol>"},{"location":"scrapy/#desvantagens_1","title":"Desvantagens","text":"<ol> <li>Sintaxe Complexa: A sintaxe de XPath pode ser mais complexa e menos intuitiva, especialmente para consultas simples.</li> <li>Desempenho: Pode ser mais lento em algumas implementa\u00e7\u00f5es devido \u00e0 sua flexibilidade e poder.</li> </ol>"},{"location":"scrapy/#exemplos_1","title":"Exemplos","text":"<ul> <li>Selecionar todos os elementos <code>div</code> com uma classe espec\u00edfica:   <pre><code>//div[@class='example']\n</code></pre></li> <li>Selecionar todos os elementos <code>a</code> dentro de um <code>div</code> com ID <code>container</code>:   <pre><code>//div[@id='container']//a\n</code></pre></li> <li>Selecionar o primeiro elemento <code>p</code> dentro de um <code>div</code>:   <pre><code>//div/p[1]\n</code></pre></li> </ul>"},{"location":"scrapy/#comparacao-em-uso","title":"Compara\u00e7\u00e3o em Uso","text":"<p>Vamos comparar como selecionar um elemento <code>span</code> com v\u00e1rias classes usando ambos:</p>"},{"location":"scrapy/#css-selector","title":"CSS Selector","text":"<pre><code>span.andes-money-amount.andes-money-amount-combo__previous-value.andes-money-amount--previous.andes-money-amount--cents-superscript\n</code></pre>"},{"location":"scrapy/#xpath_1","title":"XPath","text":"<pre><code>//span[contains(@class, 'andes-money-amount') and contains(@class, 'andes-money-amount-combo__previous-value') and contains(@class, 'andes-money-amount--previous') and contains(@class, 'andes-money-amount--cents-superscript')]\n</code></pre>"},{"location":"scrapy/#escolhendo-entre-css-selectors-e-xpath","title":"Escolhendo Entre CSS Selectors e XPath","text":"<ul> <li>Use CSS Selectors se:</li> <li>Voc\u00ea est\u00e1 realizando consultas simples.</li> <li>Est\u00e1 trabalhando principalmente com HTML.</li> <li>Voc\u00ea prefere uma sintaxe mais curta e intuitiva.</li> <li> <p>O desempenho \u00e9 uma considera\u00e7\u00e3o cr\u00edtica.</p> </li> <li> <p>Use XPath se:</p> </li> <li>Voc\u00ea precisa realizar consultas complexas.</li> <li>Est\u00e1 manipulando documentos XML.</li> <li>Precisa de filtragem avan\u00e7ada ou sele\u00e7\u00e3o relativa.</li> <li>Est\u00e1 confort\u00e1vel com uma sintaxe mais complexa e poderosa.</li> </ul> <p>Em resumo, a escolha entre CSS Selectors e XPath depende das necessidades espec\u00edficas do seu projeto e do seu conforto com cada linguagem. Ambos t\u00eam suas vantagens e desvantagens, e podem ser usados de forma complementar em muitos casos.</p>"},{"location":"scrapy/#como-rodar-nossos-spider","title":"Como rodar nossos spider","text":"<pre><code>scrapy crawl mercadolivre\n\n&gt;&gt;&gt;\n</code></pre>"},{"location":"scrapy/#salvar","title":"Salvar","text":"<pre><code>scrapy crawl mercadolivreitem -o ../../data/data.jsonl\n</code></pre>"},{"location":"transformacao/","title":"Transformacao","text":""},{"location":"transformacao/#transformacao-de-dados-pesquisa-de-mercado","title":"Transforma\u00e7\u00e3o de Dados - Pesquisa de Mercado","text":"<p>Este m\u00f3dulo do projeto utiliza Pandas e SQLite para transformar e armazenar dados coletados sobre t\u00eanis esportivos do Mercado Livre. A seguir, s\u00e3o descritos os m\u00f3dulos e funcionalidades utilizados.</p>"},{"location":"transformacao/#modulos-utilizados","title":"M\u00f3dulos Utilizados","text":""},{"location":"transformacao/#pandas","title":"<code>pandas</code>","text":"<p>Pandas \u00e9 uma biblioteca essencial para manipula\u00e7\u00e3o e an\u00e1lise de dados em Python. No projeto, \u00e9 usada para carregar, processar e analisar os dados dos t\u00eanis esportivos.</p> <ul> <li><code>pd.read_json</code>: L\u00ea dados de um arquivo JSON e retorna um DataFrame.</li> <li><code>df.head</code>: Exibe as primeiras linhas do DataFrame.</li> <li><code>df['column_name'].fillna</code>: Preenche valores nulos em uma coluna com um valor especificado.</li> <li><code>df['column_name'].astype</code>: Converte o tipo dos dados em uma coluna.</li> <li><code>df['column_name'].str.replace</code>: Substitui ocorr\u00eancias de um padr\u00e3o de string por outro.</li> <li><code>df.drop</code>: Remove colunas ou linhas do DataFrame.</li> <li><code>pd.options.display.max_columns</code>: Configura a exibi\u00e7\u00e3o de todas as colunas do DataFrame.</li> </ul>"},{"location":"transformacao/#sqlite3","title":"<code>sqlite3</code>","text":"<p>SQLite3 \u00e9 um banco de dados SQL leve e aut\u00f4nomo. \u00c9 usado no projeto para armazenar os dados dos t\u00eanis esportivos.</p> <ul> <li><code>sqlite3.connect</code>: Conecta ao banco de dados SQLite.</li> <li><code>df.to_sql</code>: Salva os dados de um DataFrame em uma tabela do banco de dados SQL.</li> <li><code>conn.close</code>: Fecha a conex\u00e3o com o banco de dados.</li> </ul>"},{"location":"transformacao/#datetime","title":"<code>datetime</code>","text":"<p>A biblioteca <code>datetime</code> do Python fornece classes para manipula\u00e7\u00e3o de datas e horas. \u00c9 usada no projeto para adicionar uma coluna com a data e hora atuais aos dados.</p> <ul> <li><code>datetime.now</code>: Retorna a data e hora atuais.</li> </ul>"},{"location":"transformacao/#estrutura-do-codigo","title":"Estrutura do C\u00f3digo","text":"<p>O c\u00f3digo do projeto est\u00e1 estruturado da seguinte forma:</p> <ol> <li> <p>Definir o Caminho para o Arquivo JSONL <pre><code>jsonl_path = '../data/data.jsonl'\n</code></pre></p> </li> <li> <p>Ler os Dados do Arquivo JSONL <pre><code>df = pd.read_json(jsonl_path, lines=True)\nprint(df.head())\n</code></pre></p> </li> <li> <p>Adicionar Colunas Fixas e Data de Coleta <pre><code>df['_source'] = \"https://lista.mercadolivre.com.br/tenis-corrida-masculino\"\ndf['_data_coleta'] = datetime.now()\n</code></pre></p> </li> <li> <p>Tratar Valores Nulos e Colunas Num\u00e9ricas <pre><code>df['old_price_reais'] = df['old_price_reais'].fillna(0).astype(float)\ndf['old_price_centavos'] = df['old_price_centavos'].fillna(0).astype(float)\ndf['new_price_reais'] = df['new_price_reais'].fillna(0).astype(float)\ndf['new_price_centavos'] = df['new_price_centavos'].fillna(0).astype(float)\ndf['reviews_rating_number'] = df['reviews_rating_number'].fillna(0).astype(float)\n</code></pre></p> </li> <li> <p>Remover Par\u00eanteses das Colunas <code>reviews_amount</code> <pre><code>df['reviews_amount'] = df['reviews_amount'].str.replace('[\\(\\)]', '', regex=True)\ndf['reviews_amount'] = df['reviews_amount'].fillna(0).astype(int)\n</code></pre></p> </li> <li> <p>Calcular Valores Totais dos Pre\u00e7os <pre><code>df['old_price'] = df['old_price_reais'] + df['old_price_centavos'] / 100\ndf['new_price'] = df['new_price_reais'] + df['new_price_centavos'] / 100\ndf.drop(columns=['old_price_reais', 'old_price_centavos', 'new_price_reais', 'new_price_centavos'], inplace=True)\n</code></pre></p> </li> <li> <p>Salvar os Dados no Banco de Dados SQLite <pre><code>conn = sqlite3.connect('../data/quotes.db')\ndf.to_sql('mercadolivre_items', conn, if_exists='replace', index=False)\nconn.close()\n</code></pre></p> </li> <li> <p>Configurar Pandas para Mostrar Todas as Colunas <pre><code>pd.options.display.max_columns = None\nprint(df.head())\n</code></pre></p> </li> </ol>"},{"location":"transformacao/#como-executar-o-projeto","title":"Como Executar o Projeto","text":"<ol> <li> <p>Instale as depend\u00eancias necess\u00e1rias: <pre><code>pip install pandas sqlite3\n</code></pre></p> </li> <li> <p>Navegue at\u00e9 o diret\u00f3rio do projeto: <pre><code>cd src/transformacao\n</code></pre></p> </li> <li> <p>Execute o script de transforma\u00e7\u00e3o: <pre><code>python process_data.py\n</code></pre></p> </li> </ol>"},{"location":"transformacao/#descricao-dos-campos-no-dataframe","title":"Descri\u00e7\u00e3o dos Campos no DataFrame","text":"<ul> <li><code>_source</code>: URL da fonte de onde os dados foram coletados.</li> <li><code>_data_coleta</code>: Data e hora em que os dados foram coletados.</li> <li><code>old_price</code>: Pre\u00e7o antigo calculado a partir de <code>old_price_reais</code> e <code>old_price_centavos</code>.</li> <li><code>new_price</code>: Pre\u00e7o novo calculado a partir de <code>new_price_reais</code> e <code>new_price_centavos</code>.</li> <li><code>reviews_rating_number</code>: Avalia\u00e7\u00e3o m\u00e9dia do produto.</li> <li><code>reviews_amount</code>: N\u00famero de avalia\u00e7\u00f5es do produto.</li> </ul>"}]}